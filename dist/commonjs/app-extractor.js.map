{"version":3,"sources":["app-extractor.js"],"names":[],"mappings":";;;;;;;;;;;;wBAAmB,UAAU;;;;QAEtB,gBAAgB;;QAChB,SAAS;;sBAEG,SAAS;;;;AAC5B,IAAI,OAAO,GAAG,oBAAO,OAAO,CAAC;;IAEhB,YAAY;AAKV,aALF,YAAY,CAKT,OAAO,EAAE;8BALZ,YAAY;;AAMjB,YAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;;iBAPQ,YAAY;;eAgBL,0BAAC,QAAQ,EAAC;AAGtB,kCAAO,MAAM,CAAC;AACV,yBAAS,EAAE,IAAI;AACf,4BAAY,EAAE,OAAO;AACrB,8BAAc,EAAE;AACZ,2BAAO,EAAE,CAAC;iBACb;AACD,uBAAO,EAAC;AACJ,uBAAG,EAAE,IAAI,CAAC,OAAO,GAAC,OAAO;iBAC5B;aACJ,CAAC,CAAC;;AAEH,gBAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;AAEpC,mBAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACpC,uBAAO,+BAAa,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,EAAE;AACnC,wBAAI,SAAS,GAAG,EAAE,CAAC;AACnB,yBAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAC;AAC3C,4BAAI,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACxB,4BAAG,KAAK,CAAC,GAAG,EAAE,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACvC;AACD,2BAAO,CAAC,SAAS,CAAC,CAAC;iBACtB,CAAC,CAAC;aACN,CAAC,CAAC;SAIN;;;WA7CQ,YAAY","file":"app-extractor.js","sourceRoot":"/source/","sourcesContent":["import System from \"systemjs\";\r\n\r\nimport \"babel/polyfill\";\r\nimport \"core-js\";\r\n\r\nimport corejs from \"core-js\";\r\nvar Promise = corejs.Promise;\r\n\r\nexport class AppExtractor {\r\n\r\n    /**\r\n     * Configure systemjs to work with the local application\r\n     */\r\n    constructor(appPath) {\r\n        this.appPath = appPath;\r\n    }\r\n\r\n    /**\r\n     * Gets the routes from a module.\r\n     * The module should export the routes array as a variable.\r\n     *\r\n     * @param moduleId    id of the module to load.\r\n     * @returns {Promise}\r\n     */\r\n    getNavFromRoutes(moduleId){\r\n\r\n        //prepare for use in windows\r\n        System.config({\r\n            \"baseURL\": \"./\",\r\n            \"transpiler\": 'babel',\r\n            \"babelOptions\": {\r\n                \"stage\": 0\r\n            },\r\n            \"paths\":{\r\n                \"*\": this.appPath+\"/*.js\"\r\n            }\r\n        });\r\n\r\n        if(!moduleId) Promise.resolve(null);\r\n        //get routes from the aurelia application\r\n        return new Promise((resolve, reject) => {\r\n            return System.import(moduleId).then(m=>{\r\n                var navRoutes = [];\r\n                for(var i = 0, l = m.routes.length; i < l; i++){\r\n                    var route = m.routes[i];\r\n                    if(route.nav) navRoutes.push(route);\r\n                }\r\n                resolve(navRoutes);\r\n            });\r\n        });\r\n\r\n\r\n\r\n    }\r\n}\r\n"]}